{
    "method1": {
        "llm_res": [
            {
                "rule": "The `symbol` function should return the symbol of the token.",
                "function": "symbol()"
            },
            {
                "rule": "The `transfer` function should throw if the message caller\u2019s account balance does not have enough tokens to spend.",
                "function": "transfer(address to, uint256 amount)"
            },
            {
                "rule": "The `transferFrom` function should throw unless the `_from` account has deliberately authorized the sender of the message via some mechanism.",
                "function": "Missing `transferFrom(address _from, address _to, uint256 _value)`"
            },
            {
                "rule": "If `approve` function is called again, it should overwrite the current allowance with `_value`.",
                "function": "Missing `approve(address _spender, uint256 _value)`"
            },
            {
                "rule": "The `allowance` function should return the amount which `_spender` is still allowed to withdraw from `_owner`.",
                "function": "Missing `allowance(address _owner, address _spender)`"
            }
        ]
    },
    "method2": {
        "llm_res": [
            "NO",
            "NO",
            "NO"
        ],
        "can_detect": [
            false,
            false,
            false
        ],
        "error": [
            null,
            null,
            null
        ]
    },
    "method3": {
        "llm_res": [
            "YES",
            "NO",
            "YES."
        ],
        "can_detect": [
            true,
            true,
            true
        ],
        "error": [
            null,
            null,
            null
        ]
    }
}