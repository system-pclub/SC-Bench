{
    "erc": "721",
    "contract": "BitAliensGenesis",
    "inj_file": "dataset/err-inj/injected/BitAliensGenesis-0x7609b767.sol",
    "orig_file": "dataset/err-inj/origin/BitAliensGenesis-0x7609b767.sol",
    "inj_errors": [
        {
            "config": [
                "interface",
                {
                    "function": "safeTransferFrom",
                    "numofargs": 3,
                    "rule": "function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;",
                    "severity": "medium"
                }
            ],
            "lines": [
                {
                    "orig_range": [
                        613,
                        617
                    ],
                    "to_replace": []
                },
                {
                    "orig_range": [
                        1030,
                        1036
                    ],
                    "to_replace": []
                },
                {
                    "orig_range": [
                        1574,
                        1576
                    ],
                    "to_replace": []
                }
            ]
        },
        {
            "config": [
                "return",
                {
                    "function": "getApproved",
                    "numofargs": 1,
                    "rule": "The approved address for this NFT, or the zero address if there is none",
                    "severity": "high"
                }
            ],
            "lines": [
                {
                    "orig_range": [
                        996,
                        996
                    ],
                    "to_replace": [
                        "        return address(951);"
                    ]
                }
            ]
        },
        {
            "config": [
                "return",
                {
                    "function": "isApprovedForAll",
                    "numofargs": 2,
                    "rule": "True if `_operator` is an approved operator for `_owner`, false otherwise",
                    "severity": "high"
                }
            ],
            "lines": [
                {
                    "orig_range": [
                        1013,
                        1013
                    ],
                    "to_replace": [
                        "        return !_operatorApprovals[owner][operator];\n"
                    ]
                }
            ]
        }
    ],
    "compile_error": null
}