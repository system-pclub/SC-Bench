{
    "method1": {
        "llm_res": [
            {
                "rule": "The `balanceOf` function must return the number of NFTs owned by `_owner`, possibly zero. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
                "function": "balanceOf"
            },
            {
                "rule": "The `ownerOf` function must return the owner of the `tokenId`. NFTs assigned to zero address are considered invalid, and queries about them do throw.",
                "function": "ownerOf"
            },
            {
                "rule": "The `safeTransferFrom` function must check if `_to` is a smart contract (code size > 0). If so, it must call `onERC721Received` on `_to` and throw if the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
                "function": "safeTransferFrom"
            },
            {
                "rule": "The `transferFrom` function must throw unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.",
                "function": "transferFrom"
            },
            {
                "rule": "The `approve` function must throw unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.",
                "function": "approve"
            },
            {
                "rule": "The `setApprovalForAll` function must allow enabling or disabling approval for a third party ('operator') to manage all of `msg.sender`'s assets.",
                "function": "setApprovalForAll"
            },
            {
                "rule": "The `getApproved` function must throw if `_tokenId` is not a valid NFT.",
                "function": "getApproved"
            },
            {
                "rule": "The `isApprovedForAll` function must return true if `_operator` is an approved operator for `_owner`, false otherwise.",
                "function": "isApprovedForAll"
            }
        ]
    },
    "method2": {
        "llm_res": [
            "NO",
            "NO",
            "NO"
        ],
        "can_detect": [
            false,
            false,
            false
        ],
        "error": [
            null,
            null,
            null
        ]
    },
    "method3": {
        "llm_res": [
            "YES",
            "YES",
            "NO"
        ],
        "can_detect": [
            true,
            true,
            false
        ],
        "error": [
            null,
            null,
            null
        ]
    }
}