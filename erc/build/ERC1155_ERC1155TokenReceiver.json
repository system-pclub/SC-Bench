{
    "functions": [
        {
            "def": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);",
            "raw_rules": "    /**\n        @notice Handle the receipt of a single ERC1155 token type.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \n        This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n        This function MUST revert if it rejects the transfer.\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _id        The ID of the token being transferred\n        @param _value     The amount of tokens being transferred\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    */\n",
            "format": {
                "name": "onERC1155Received",
                "arg_types": [
                    {
                        "name": "_operator",
                        "type": "address"
                    },
                    {
                        "name": "_from",
                        "type": "address"
                    },
                    {
                        "name": "_id",
                        "type": "uint256"
                    },
                    {
                        "name": "_value",
                        "type": "uint256"
                    },
                    {
                        "name": "_data",
                        "type": "bytes calldata"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "bytes4"
                }
            },
            "extracted": {
                "throw": [
                    {
                        "if": "if it rejects the transfer",
                        "throw": true
                    },
                    {
                        "if": "if the return is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`",
                        "throw": true
                    }
                ],
                "return": {
                    "returns": "Indicates acceptance of the token transfer"
                },
                "assign": [],
                "call": [
                    {
                        "call": "onERC1155Received",
                        "if": "An ERC1155-compliant smart contract calls this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated."
                    }
                ]
            },
            "extract_debug": "```json\n[\n    {\n        \"call\": \"onERC1155Received\",\n        \"if\": \"An ERC1155-compliant smart contract calls this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\"\n    }\n]\n```"
        },
        {
            "def": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);",
            "raw_rules": "\n    /**\n        @notice Handle the receipt of multiple ERC1155 token types.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \n        This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n        This function MUST revert if it rejects the transfer(s).\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n    */\n",
            "format": {
                "name": "onERC1155BatchReceived",
                "arg_types": [
                    {
                        "name": "_operator",
                        "type": "address"
                    },
                    {
                        "name": "_from",
                        "type": "address"
                    },
                    {
                        "name": "_ids",
                        "type": "uint256[] calldata"
                    },
                    {
                        "name": "_values",
                        "type": "uint256[] calldata"
                    },
                    {
                        "name": "_data",
                        "type": "bytes calldata"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "bytes4"
                }
            },
            "extracted": {
                "throw": [
                    {
                        "if": "the function does not accept the transfer(s)",
                        "throw": true
                    },
                    {
                        "if": "return value is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`",
                        "throw": true
                    }
                ],
                "return": {
                    "returns": "Indicates that the implementing contract has accepted the batch transfer of the ERC1155 tokens"
                },
                "assign": [],
                "call": [
                    {
                        "call": "onERC1155BatchReceived",
                        "if": "at the end of a `safeBatchTransferFrom` after the balances have been updated"
                    }
                ]
            },
            "extract_debug": "```json\n[\n    {\n        \"call\": \"onERC1155BatchReceived\",\n        \"if\": \"at the end of a `safeBatchTransferFrom` after the balances have been updated\"\n    }\n]\n```"
        }
    ],
    "events": [],
    "name": "ERC1155TokenReceiver",
    "rules": [
        {
            "rule": " throw if if it rejects the transfer",
            "type": "throw",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);",
            "related_vars": {
                "variables": [
                    "msg.sender"
                ],
                "parameters": []
            },
            "related_vars_debug": "```json\n{\n    \"variables\": [\"msg.sender\"],\n    \"parameters\": []\n}\n```"
        },
        {
            "rule": " throw if if the return is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`",
            "type": "throw",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);",
            "related_vars": {
                "variables": [
                    "msg.sender"
                ],
                "parameters": []
            },
            "related_vars_debug": "```json\n{\n    \"variables\": [\"msg.sender\"],\n    \"parameters\": []\n}\n```\nThis configuration indicates that the `msg.sender` variable is used in the rule implementation, but none of the function's parameters (indexed from left to right starting at 0) are specifically used for enforcing the ERC rule. The rule focuses on the return value check against a constant result from a keccak256 hashing function call. The logic here primarily utilizes the `msg.sender` to probably check who called the function, which could be relevant in determining how permissions are managed, although the function parameters themselves are not directly manipulated or used for the core condition mentioned in the rule."
        },
        {
            "rule": "Indicates acceptance of the token transfer",
            "type": "return",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);",
            "related_vars": null
        },
        {
            "rule": "call onERC1155Received if An ERC1155-compliant smart contract calls this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.",
            "type": "call",
            "interface": "function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);",
            "related_vars": null
        },
        {
            "rule": " throw if the function does not accept the transfer(s)",
            "type": "throw",
            "interface": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);",
            "related_vars": {
                "variables": [
                    "msg.sender"
                ],
                "parameters": []
            },
            "related_vars_debug": "```json\n{\n    \"variables\": [\"msg.sender\"],\n    \"parameters\": []\n}\n```\nThis response assumes that to enforce the rule of throwing if the transfer isn't accepted, you may need `msg.sender` to identify the sender of the message (transaction) and wouldn't specifically need to utilize the function parameters (indices) for this check."
        },
        {
            "rule": " throw if return value is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`",
            "type": "throw",
            "interface": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);",
            "related_vars": {
                "variables": [
                    "msg.sender"
                ],
                "parameters": []
            },
            "related_vars_debug": "```json\n{\n    \"variables\": [\"msg.sender\"],\n    \"parameters\": []\n}\n```"
        },
        {
            "rule": "Indicates that the implementing contract has accepted the batch transfer of the ERC1155 tokens",
            "type": "return",
            "interface": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);",
            "related_vars": null
        },
        {
            "rule": "call onERC1155BatchReceived if at the end of a `safeBatchTransferFrom` after the balances have been updated",
            "type": "call",
            "interface": "function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);",
            "related_vars": null
        }
    ]
}