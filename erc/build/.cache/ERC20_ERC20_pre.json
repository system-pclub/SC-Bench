{
    "functions": [
        {
            "def": "function name() public view returns (string)",
            "raw_rules": "\nToken\n\nMethods\n\nNOTES:\nThe following specifications use syntax from Solidity 0.4.17 (or above). \nCallers MUST handle false from returns (bool success). Callers MUST NOT assume that false is never returned!\n\nname\nReturns the name of the token - e.g. \"MyToken\". OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.\n",
            "format": {
                "name": "name",
                "arg_types": [],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "string"
                }
            }
        },
        {
            "def": "function symbol() public view returns (string)",
            "raw_rules": "\nsymbol\nReturns the symbol of the token. E.g. \"HIX\". OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.\n",
            "format": {
                "name": "symbol",
                "arg_types": [],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "string"
                }
            }
        },
        {
            "def": "function decimals() public view returns (uint8)",
            "raw_rules": "\ndecimals\nReturns the number of decimals the token uses - e.g. 8, means to divide the token amount by 100000000 to get its user representation. OPTIONAL - This method can be used to improve usability, but interfaces and other contracts MUST NOT expect these values to be present.\n",
            "format": {
                "name": "decimals",
                "arg_types": [],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "uint8"
                }
            }
        },
        {
            "def": "function totalSupply() public view returns (uint256)",
            "raw_rules": "\ntotalSupply\nReturns the total token supply.\n",
            "format": {
                "name": "totalSupply",
                "arg_types": [],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "uint256"
                }
            }
        },
        {
            "def": "function balanceOf(address _owner) public view returns (uint256 balance)",
            "raw_rules": "\nbalanceOf\nReturns the account balance of another account with address _owner.\n",
            "format": {
                "name": "balanceOf",
                "arg_types": [
                    {
                        "name": "_owner",
                        "type": "address"
                    }
                ],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "name": "balance",
                    "type": "uint256"
                }
            }
        },
        {
            "def": "function transfer(address _to, uint256 _value) public returns (bool success)",
            "raw_rules": "\ntransfer\nTransfers _value amount of tokens to address _to, and MUST fire the Transfer event. The function SHOULD throw if the message caller\u2019s account balance does not have enough tokens to spend. \nNote Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n",
            "format": {
                "name": "transfer",
                "arg_types": [
                    {
                        "name": "_to",
                        "type": "address"
                    },
                    {
                        "name": "_value",
                        "type": "uint256"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": false,
                "return_type": {
                    "name": "success",
                    "type": "bool"
                }
            }
        },
        {
            "def": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)",
            "raw_rules": "\ntransferFrom\nTransfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event. The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism. \nNote Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n",
            "format": {
                "name": "transferFrom",
                "arg_types": [
                    {
                        "name": "_from",
                        "type": "address"
                    },
                    {
                        "name": "_to",
                        "type": "address"
                    },
                    {
                        "name": "_value",
                        "type": "uint256"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": false,
                "return_type": {
                    "name": "success",
                    "type": "bool"
                }
            }
        },
        {
            "def": "function approve(address _spender, uint256 _value) public returns (bool success)",
            "raw_rules": "\napprove\nAllows _spender to withdraw from your account multiple times, up to the _value amount. If this function is called again it overwrites the current allowance with _value. \nNOTE: To prevent attack vectors like the one described here and discussed here, clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender. THOUGH The contract itself shouldn\u2019t enforce it, to allow backwards compatibility with contracts deployed before.\n",
            "format": {
                "name": "approve",
                "arg_types": [
                    {
                        "name": "_spender",
                        "type": "address"
                    },
                    {
                        "name": "_value",
                        "type": "uint256"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": false,
                "return_type": {
                    "name": "success",
                    "type": "bool"
                }
            }
        },
        {
            "def": "function allowance(address _owner, address _spender) public view returns (uint256 remaining)",
            "raw_rules": "\nallowance\nReturns the amount which _spender is still allowed to withdraw from _owner.\n",
            "format": {
                "name": "allowance",
                "arg_types": [
                    {
                        "name": "_owner",
                        "type": "address"
                    },
                    {
                        "name": "_spender",
                        "type": "address"
                    }
                ],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "name": "remaining",
                    "type": "uint256"
                }
            }
        }
    ],
    "events": [
        {
            "def": "event Transfer(address indexed _from, address indexed _to, uint256 _value)\n",
            "raw_rules": "\nEvents\n\nTransfer\nMUST trigger when tokens are transferred, including zero value transfers. A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\n",
            "format": {
                "name": "Transfer",
                "arg_types": [
                    {
                        "name": "_from",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "_to",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "uint256",
                        "type": "_value",
                        "indexed": false
                    }
                ]
            }
        },
        {
            "def": "event Approval(address indexed _owner, address indexed _spender, uint256 _value)\n",
            "raw_rules": "\nApproval\nMUST trigger on any successful call to approve(address _spender, uint256 _value).\n",
            "format": {
                "name": "Approval",
                "arg_types": [
                    {
                        "name": "_owner",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "_spender",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "uint256",
                        "type": "_value",
                        "indexed": false
                    }
                ]
            }
        }
    ],
    "name": "ERC20"
}