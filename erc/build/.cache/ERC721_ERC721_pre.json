{
    "functions": [
        {
            "def": "function balanceOf(address _owner) external view returns (uint256);",
            "raw_rules": "\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n",
            "format": {
                "name": "balanceOf",
                "arg_types": [
                    {
                        "name": "_owner",
                        "type": "address"
                    }
                ],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "uint256"
                }
            }
        },
        {
            "def": "function ownerOf(uint256 _tokenId) external view returns (address);",
            "raw_rules": "\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///  about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n",
            "format": {
                "name": "ownerOf",
                "arg_types": [
                    {
                        "name": "_tokenId",
                        "type": "uint256"
                    }
                ],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "address"
                }
            }
        },
        {
            "def": "function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;",
            "raw_rules": "\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n",
            "format": {
                "name": "safeTransferFrom",
                "arg_types": [
                    {
                        "name": "_from",
                        "type": "address"
                    },
                    {
                        "name": "_to",
                        "type": "address"
                    },
                    {
                        "name": "_tokenId",
                        "type": "uint256"
                    },
                    {
                        "name": "data",
                        "type": "bytes"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": true,
                "return_type": null
            }
        },
        {
            "def": "function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;",
            "raw_rules": "\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n",
            "format": {
                "name": "safeTransferFrom",
                "arg_types": [
                    {
                        "name": "_from",
                        "type": "address"
                    },
                    {
                        "name": "_to",
                        "type": "address"
                    },
                    {
                        "name": "_tokenId",
                        "type": "uint256"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": true,
                "return_type": null
            }
        },
        {
            "def": "function transferFrom(address _from, address _to, uint256 _tokenId) external payable;",
            "raw_rules": "\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n",
            "format": {
                "name": "transferFrom",
                "arg_types": [
                    {
                        "name": "_from",
                        "type": "address"
                    },
                    {
                        "name": "_to",
                        "type": "address"
                    },
                    {
                        "name": "_tokenId",
                        "type": "uint256"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": true,
                "return_type": null
            }
        },
        {
            "def": "function approve(address _approved, uint256 _tokenId) external payable;",
            "raw_rules": "\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///  operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n",
            "format": {
                "name": "approve",
                "arg_types": [
                    {
                        "name": "_approved",
                        "type": "address"
                    },
                    {
                        "name": "_tokenId",
                        "type": "uint256"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": true,
                "return_type": null
            }
        },
        {
            "def": "function setApprovalForAll(address _operator, bool _approved) external;",
            "raw_rules": "\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///  multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n",
            "format": {
                "name": "setApprovalForAll",
                "arg_types": [
                    {
                        "name": "_operator",
                        "type": "address"
                    },
                    {
                        "name": "_approved",
                        "type": "bool"
                    }
                ],
                "optional": null,
                "view": false,
                "pure": false,
                "payable": false,
                "return_type": null
            }
        },
        {
            "def": "function getApproved(uint256 _tokenId) external view returns (address);",
            "raw_rules": "\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n",
            "format": {
                "name": "getApproved",
                "arg_types": [
                    {
                        "name": "_tokenId",
                        "type": "uint256"
                    }
                ],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "address"
                }
            }
        },
        {
            "def": "function isApprovedForAll(address _owner, address _operator) external view returns (bool);",
            "raw_rules": "\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n",
            "format": {
                "name": "isApprovedForAll",
                "arg_types": [
                    {
                        "name": "_owner",
                        "type": "address"
                    },
                    {
                        "name": "_operator",
                        "type": "address"
                    }
                ],
                "optional": null,
                "view": true,
                "pure": false,
                "payable": false,
                "return_type": {
                    "type": "bool"
                }
            }
        }
    ],
    "events": [
        {
            "def": "    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n",
            "raw_rules": "    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///  may be created and assigned without emitting Transfer. At the time of\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n",
            "format": {
                "name": "Transfer",
                "arg_types": [
                    {
                        "name": "_from",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "_to",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "_tokenId",
                        "type": "uint256",
                        "indexed": true
                    }
                ]
            }
        },
        {
            "def": "    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n",
            "raw_rules": "\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///  reaffirmed. The zero address indicates there is no approved address.\n    ///  When a Transfer event emits, this also indicates that the approved\n    ///  address for that NFT (if any) is reset to none.\n",
            "format": {
                "name": "Approval",
                "arg_types": [
                    {
                        "name": "_owner",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "_approved",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "_tokenId",
                        "type": "uint256",
                        "indexed": true
                    }
                ]
            }
        },
        {
            "def": "    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n",
            "raw_rules": "\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all NFTs of the owner.\n",
            "format": {
                "name": "ApprovalForAll",
                "arg_types": [
                    {
                        "name": "_owner",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "_operator",
                        "type": "address",
                        "indexed": true
                    },
                    {
                        "name": "bool",
                        "type": "_approved",
                        "indexed": false
                    }
                ]
            }
        }
    ],
    "name": "ERC721"
}